// This file is auto-generated by @hey-api/openapi-ts

export type Body_ingestions_create_ingestion = {
    /**
     * PDF worksheet file
     */
    file: (Blob | File);
};

export type Body_login_login_access_token = {
    grant_type?: (string | null);
    username: string;
    password: string;
    scope?: string;
    client_id?: (string | null);
    client_secret?: (string | null);
};

/**
 * Extraction pipeline status enum.
 */
export type ExtractionStatus = 'UPLOADED' | 'OCR_PROCESSING' | 'OCR_COMPLETE' | 'SEGMENTATION_PROCESSING' | 'SEGMENTATION_COMPLETE' | 'TAGGING_PROCESSING' | 'DRAFT' | 'IN_REVIEW' | 'APPROVED' | 'REJECTED' | 'FAILED';

export type HTTPValidationError = {
    detail?: Array<ValidationError>;
};

export type IngestionPublic = {
    /**
     * Original filename
     */
    filename: string;
    /**
     * File size in bytes
     */
    file_size: number;
    /**
     * Number of pages in PDF
     */
    page_count?: (number | null);
    /**
     * MIME type (application/pdf)
     */
    mime_type: string;
    status?: ExtractionStatus;
    /**
     * OCR provider used (e.g., 'mistral')
     */
    ocr_provider?: (string | null);
    /**
     * Timestamp when OCR completed
     */
    ocr_processed_at?: (string | null);
    /**
     * OCR processing time in seconds
     */
    ocr_processing_time?: (number | null);
    /**
     * OCR API cost in USD
     */
    ocr_cost?: (number | null);
    /**
     * Average OCR confidence score (0.0-1.0)
     */
    ocr_average_confidence?: (number | null);
    /**
     * Path to OCR output JSON in storage
     */
    ocr_storage_path?: (string | null);
    id: string;
    owner_id: string;
    presigned_url: string;
    uploaded_at: string;
};

export type IngestionsPublic = {
    data: Array<IngestionPublic>;
    count: number;
};

export type Message = {
    message: string;
};

export type NewPassword = {
    token: string;
    new_password: string;
};

export type PrivateUserCreate = {
    email: string;
    password: string;
    full_name: string;
    is_verified?: boolean;
};

export type Token = {
    access_token: string;
    token_type?: string;
};

export type UpdatePassword = {
    current_password: string;
    new_password: string;
};

export type UserCreate = {
    email: string;
    is_active?: boolean;
    is_superuser?: boolean;
    full_name?: (string | null);
    password: string;
};

export type UserPublic = {
    email: string;
    is_active?: boolean;
    is_superuser?: boolean;
    full_name?: (string | null);
    id: string;
};

export type UserRegister = {
    email: string;
    password: string;
    full_name?: (string | null);
};

export type UsersPublic = {
    data: Array<UserPublic>;
    count: number;
};

export type UserUpdate = {
    email?: (string | null);
    is_active?: boolean;
    is_superuser?: boolean;
    full_name?: (string | null);
    password?: (string | null);
};

export type UserUpdateMe = {
    full_name?: (string | null);
    email?: (string | null);
};

export type ValidationError = {
    loc: Array<(string | number)>;
    msg: string;
    type: string;
};

export type IngestionsCreateIngestionData = {
    formData: Body_ingestions_create_ingestion;
};

export type IngestionsCreateIngestionResponse = (IngestionPublic);

export type IngestionsReadIngestionsData = {
    limit?: number;
    skip?: number;
};

export type IngestionsReadIngestionsResponse = (IngestionsPublic);

export type IngestionsGetIngestionData = {
    id: string;
};

export type IngestionsGetIngestionResponse = (IngestionPublic);

export type LoginLoginAccessTokenData = {
    formData: Body_login_login_access_token;
};

export type LoginLoginAccessTokenResponse = (Token);

export type LoginTestTokenResponse = (UserPublic);

export type LoginRecoverPasswordData = {
    email: string;
};

export type LoginRecoverPasswordResponse = (Message);

export type LoginResetPasswordData = {
    requestBody: NewPassword;
};

export type LoginResetPasswordResponse = (Message);

export type LoginRecoverPasswordHtmlContentData = {
    email: string;
};

export type LoginRecoverPasswordHtmlContentResponse = (string);

export type PrivateCreateUserData = {
    requestBody: PrivateUserCreate;
};

export type PrivateCreateUserResponse = (UserPublic);

export type TasksTriggerHealthCheckResponse = ({
    [key: string]: unknown;
});

export type TasksTriggerTestTaskData = {
    duration?: number;
};

export type TasksTriggerTestTaskResponse = ({
    [key: string]: unknown;
});

export type TasksGetTaskStatusData = {
    taskId: string;
};

export type TasksGetTaskStatusResponse = ({
    [key: string]: unknown;
});

export type TasksGetWorkerStatsResponse = ({
    [key: string]: unknown;
});

export type UsersReadUsersData = {
    limit?: number;
    skip?: number;
};

export type UsersReadUsersResponse = (UsersPublic);

export type UsersCreateUserData = {
    requestBody: UserCreate;
};

export type UsersCreateUserResponse = (UserPublic);

export type UsersReadUserMeResponse = (UserPublic);

export type UsersDeleteUserMeResponse = (Message);

export type UsersUpdateUserMeData = {
    requestBody: UserUpdateMe;
};

export type UsersUpdateUserMeResponse = (UserPublic);

export type UsersUpdatePasswordMeData = {
    requestBody: UpdatePassword;
};

export type UsersUpdatePasswordMeResponse = (Message);

export type UsersRegisterUserData = {
    requestBody: UserRegister;
};

export type UsersRegisterUserResponse = (UserPublic);

export type UsersReadUserByIdData = {
    userId: string;
};

export type UsersReadUserByIdResponse = (UserPublic);

export type UsersUpdateUserData = {
    requestBody: UserUpdate;
    userId: string;
};

export type UsersUpdateUserResponse = (UserPublic);

export type UsersDeleteUserData = {
    userId: string;
};

export type UsersDeleteUserResponse = (Message);

export type UtilsTestEmailData = {
    emailTo: string;
};

export type UtilsTestEmailResponse = (Message);

export type UtilsHealthCheckResponse = (boolean);